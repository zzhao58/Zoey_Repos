/*
		std::vector<std::thread> threads;
		for (size_t i = 0; i < stations.size(); i++) {
			
			threads.push_back(std::thread([&]() {
				
				if (!stations[i]->ordersQueue.empty()) {    //use Si insteadof stations[i]
					stations[i]->fill(os);
				} 
				
				os << "--> " << stations[i]->ordersQueue.front().getNameProduct() << " moved from " << stations[i]->itemset.getName() << " to ";
				if (i!=lastStation){
					if (stations[i]->hasAnOrderToRelease()) {
						stations[nextStations[i]]->ordersQueue.push(stations[i]->ordersQueue.front());
						os << stations[nextStations[i]]->itemset.getName() << std::endl;
						stations[i]->ordersQueue.pop();
					}
				}
				else {
					std::string completedstr;
					completedstr = (stations[i]->ordersQueue.front().isFilled()) ? "Completed Set" : "Incomplete Set";
					os << completedstr << std::endl;
				}
			
			}));
		}
		
		for (auto& thread : threads)
			thread.join();

		return (stations[lastStation]->ordersQueue.size() == orders.size())? true:false;
		*/