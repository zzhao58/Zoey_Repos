--Assignment 1 by ZHI ZHAO
--1--

SET SERVEROUTP ON
SET VERIFY OFF

ACCEPT country_code PROMPT 'Please input two letter country code';
DECLARE 
    v_country_code varchar2(2):=UPPER('&country_code');
    v_province varchar2(25);
    v_country_id_count number(5);
    v_city number(5);
    
    v_location locations%ROWTYPE;      
BEGIN
    SELECT count(country_id)
    INTO v_country_id_count
    FROM countries
    WHERE UPPER(country_id)=UPPER('&country_code');
    
    IF v_country_id_count=0 THEN
        RAISE NO_DATA_FOUND;
    END IF;
    
    SELECT count(city)
    INTO v_city
    FROM locations
    WHERE state_province IS null
    AND UPPER(country_id)=v_country_code;
    
    IF v_city > 1 THEN
        DBMS_OUTPUT.PUT_LINE('This country has MORE THAN ONE City without province listed.');
    ELSIF v_city = 0 THEN
        DBMS_OUTPUT.PUT_LINE('This country has NO cities listed');
    ELSE
        UPDATE locations
        SET state_Province = CASE 
                                WHEN substr(City,1,1) IN ('A', 'B', 'E', 'F' ) THEN rpad('*',Length(street_address),'*')
                                WHEN substr(City,1,1) IN ('C', 'D', 'G', 'H' ) THEN rpad('&',Length(street_address),'&')
                                ELSE rpad('#',Length(street_address),'#')
                            END 
        WHERE state_province is null
          AND country_id=v_country_code;
  
        select *
        INTO v_location
        from locations
        where UPPER(country_id)= v_country_code
        and substr(state_Province,1,1) in ('*','&','#');
        
        DBMS_OUTPUT.PUT_LINE('City '||v_location.city||' has modified its province to '||v_location.STATE_PROVINCE);
                           
        Rollback;
    END IF;
    
    EXCEPTION 
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('This country has NO cities listed');
END;

------------------------------------
--2--
ALTER TABLE countries
ADD FLAG CHAR(7);

SET SERVEROUTPUT ON
SET VERIFY OFF

ACCEPT  regionID PROMPT 'Enter value for region: ';
DECLARE
    v_region_id number(2):='&regionID';
    v_region_count PLS_INTEGER;
    v_country_count PLS_INTEGER;
    v_country_name varchar2(20);
    v_all_country_count varchar2(20);
  
    
    
    CURSOR cur_countries IS 
    SELECT country_ID, country_name,Region_ID,flag
    FROM COUNTRIES
    WHERE country_id not in (select country_id from locations)
    ORDER BY region_id,country_name;

BEGIN
    SELECT COUNT(region_id)
    INTO v_region_count
    FROM REGIONS
    WHERE region_id=v_region_id;
    
    IF v_region_count = 0 THEN
       RAISE NO_DATA_FOUND;
    END IF;
    
    SELECT count(c.country_id)
    INTO v_country_count
    FROM COUNTRIES  c
    LEFT JOIN locations l on c.country_id = l.country_id
    WHERE l.country_id is null
      AND c.region_id = v_region_id;
      
    IF v_country_count > 1 THEN
        DBMS_OUTPUT.PUT_LINE('This region ID has MORE THAN ONE country without cities listed: '||v_region_id);
    ELSE 
        SELECT c.country_name
        INTO v_country_name
        FROM COUNTRIES  c
        LEFT JOIN locations l on c.country_id = l.country_id
        WHERE l.country_id is null
        AND c.region_id = v_region_id;
        
        DBMS_OUTPUT.PUT_LINE('In the region'|| v_region_id ||'there is ONE country '||v_country_name||' with NO city. ');
    END IF;
    
    SELECT count(c.country_id)
    INTO v_all_country_count
    FROM COUNTRIES  c
    LEFT JOIN locations l on c.country_id = l.country_id
    WHERE l.country_id is null;
    DBMS_OUTPUT.PUT_LINE('Number of countries with NO cities listed is: '||v_all_country_count);
    
    UPDATE COUNTRIES
    SET FLAG ='EMPTY_'||to_char(region_id)
    WHERE country_id not in (select country_id from locations);
    
    DBMS_OUTPUT.PUT_LINE('C COUNTRY_NAME                REGION_ID FLAG');
    DBMS_OUTPUT.PUT_LINE('---------------------------------------------');
    FOR re_country IN cur_countries
    LOOP
         DBMS_OUTPUT.PUT_LINE(re_country.country_id||' '||re_country.country_name||'              '||re_country.region_id||' '||re_country.flag);
    END LOOP;
    DBMS_OUTPUT.PUT_LINE(v_all_country_count||'rows selected');
    ROLLBACK;
    
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('This region ID does NOT exist: '||v_region_id);
            DBMS_OUTPUT.PUT_LINE('no rows selected ');
END;
--------------------------------------------------------
--4--
SET SERVEROUTPUT ON
SET VERIFY OFF

ACCEPT v_course_description PROMPT 'Any piece of  course description in UPPER case';
ACCEPT v_instr_last_name PROMPT 'Beginning of  Instructorâ€™s last name in UPPER CASE ';
DECLARE
    count_section_id number(20);
    v_stu_count PLS_INTEGER;
    v_total_student PLS_INTEGER:=0;
    
    CURSOR cur_mix IS 
    SELECT c.course_no,c.description,s.section_id,i.Last_Name,s.section_no
    FROM course c
    INNER JOIN section s on c.course_no= s.course_no
    INNER JOIN instructor i on s.instructor_id = i.instructor_id
    WHERE UPPER(c.description) like UPPER('%&v_course_description%')
    AND  i.last_name like UPPER('&v_instr_last_name%'); 
    
    rec_cur_mix cur_mix%ROWTYPE;
BEGIN

    OPEN cur_mix;
    FETCH cur_mix INTO rec_cur_mix;
    IF cur_mix%NOTFOUND THEN
        DBMS_OUTPUT.PUT_LINE('There is NO data for this input match between the course description piece and the surname start of Instructor. Try again! ');
    ELSE
        LOOP
          SELECT count(*)
          INTO v_stu_count
          FROM enrollment
          WHERE section_id = rec_cur_mix.section_id;
          
          v_total_student:=v_total_student+v_stu_count;
            
          DBMS_OUTPUT.PUT_LINE('');
          DBMS_OUTPUT.PUT_LINE('Course No: '|| rec_cur_mix.course_no||' '||rec_cur_mix.description||' with Section Id: '||rec_cur_mix.section_id||' is taught by '||rec_cur_mix.last_name||' in the Course Section: '||rec_cur_mix.section_no);
          DBMS_OUTPUT.PUT_LINE('');
          DBMS_OUTPUT.PUT_LINE('            This Section Id has an enrollment of: '||v_stu_count);
          DBMS_OUTPUT.PUT_LINE('**********************************************************');
          
          FETCH cur_mix INTO rec_cur_mix;
          EXIT WHEN cur_mix%NOTFOUND;
        END LOOP;  
        DBMS_OUTPUT.PUT_LINE('This input match has a total enrollment of: '||to_char(v_total_student)||' students.');
       
    END IF;
    CLOSE cur_mix;
    

